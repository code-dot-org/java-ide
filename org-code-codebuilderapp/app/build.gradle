/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    // id 'application'
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

// I don't think these are needed
group = 'org.code'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    // Use JCenter for resolving dependencies.
    // jcenter()
    mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.webjars:sockjs-client:1.0.2'
	implementation 'org.webjars:stomp-websocket:2.3.3'
	implementation 'org.webjars:bootstrap:3.3.7'
	implementation 'org.webjars:jquery:3.1.1-1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

// application {
//     // Define the main class for the application.
//     mainClass = 'org.code.codebuilderapp.CodeBuilderApplication'
// }

task uberJar(type: Jar) {
    archiveClassifier = 'uber'
  manifest {
    attributes(
      'Main-Class': 'org.code.codebuilderapp.CodeBuilderApplication'
    )
  }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
